@model iis_web.Models.Character

@{
    ViewBag.Title = "XSD";
}

<h2>XSD</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Character</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("status", new SelectList(Enum.GetValues(typeof(iis_web.Models.Character.CharacterStatus))), "Select status", new { @class = "form-select" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Species, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Species, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Species, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("gender", new SelectList(Enum.GetValues(typeof(iis_web.Models.Character.CharacterGender))), "Select gender", new { @class = "form-select" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Image, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Image, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("location", ViewBag.Locations as List<SelectListItem>, "Select location", new { @class = "form-select" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Origin, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("origin", ViewBag.Locations as List<SelectListItem>, "Select origin", new { @class = "form-select" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Origin, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 d-flex gap-2">
                @Html.DropDownList("episodes", ViewBag.Episodes as List<SelectListItem>, "Add episode", new { @class = "form-select" })
                <input type="button" class="btn btn-primary" value="Add" onclick="onEpisodeAdd()" />
            </div>
        </div>

        <table class="table" id="episode-table">
            <thead>
                <tr>
                    <th scope="col">Selected episodes</th>
                    <th></th>
                </tr>
            </thead>
            <tbody id="table-body">
            </tbody>
        </table>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="button" value="Create" onclick="onFormSubmit()" class="btn btn-success mt-2" />
            </div>
        </div>
    </div>
}

@section scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.2/axios.js"></script>
    <script type="text/javascript">
        (function () {
            document.getElementById("episode-table").style.visibility = "hidden";
        })()

        function postData(character) {
            axios({
                url: '/Rest/XSD',
                method: 'post',
                contentType: 'application/json',
                data: character
            })
            .then(res => {
                if (res.data === "OK") {
                    alert("Success")
                    window.location.replace("http://localhost:54469/Rest/Index");
                } 
            })
        }

        function onEpisodeAdd() {
            const ddl = document.getElementById("episodes");
            if (ddl.selectedIndex != 0) {
                document.getElementById("episode-table").style.visibility = "visible";
                const tBody = document.getElementById("table-body");
                const tr = document.createElement("tr");
                const option = ddl.options[ddl.selectedIndex];
                tr.innerHTML = `
                        <tr>
                            <th id="episode-${option.value}">${option.text}</th>
                            <th><input value="Remove" type="button" class="btn btn-danger" onclick="onEpisodeRemove(${option.value})" /></th>
                        </tr>
                    `;
                tBody.appendChild(tr);
                ddl.remove(ddl.selectedIndex);
            }
        }

        function onEpisodeRemove(id) {
            const row = document.createElement("option");
            const option = document.getElementById(`episode-${id}`);
            const tBody = document.getElementById("table-body");
            row.value = id;
            row.innerText = document.getElementById(`episode-${id}`).innerText;
            document.getElementById("episodes").appendChild(row);
            tBody.removeChild(option.parentElement);
            if (tBody.childNodes.length === 1) {

                document.getElementById("episode-table").style.visibility = "hidden";
            }
        }

        function onFormSubmit() {
            const statusDdl = document.getElementById("status");
            const genderDdl = document.getElementById("gender");
            const locationDdl = document.getElementById("location");
            const originDdl = document.getElementById("origin");
            const episodeTable = document.getElementById("table-body");

            const name = document.getElementById("Name").value;
            const type = document.getElementById('Type').value;
            const species = document.getElementById('Species').value;
            const image = document.getElementById('Image').value;
            const status = statusDdl.options[statusDdl.selectedIndex].innerText;
            const gender = genderDdl.options[genderDdl.selectedIndex].innerText;
            const location = locationDdl.options[locationDdl.selectedIndex];
            const origin = originDdl.options[originDdl.selectedIndex];


            let valid = true;
            if (name === "" || type === "" || species === ""
                || image === "" || status === "Select status" || gender === "Select gender"
                || location === "Select location"
                || origin === "Select origin") {
                valid = false;
            }

            const episodes = [];
            for (var i = 0; i < episodeTable.children.length; i++) {
                const ID = episodeTable.children[i].children[0].id.substring(8);
                const Name = episodeTable.children[i].children[0].innerText;
                episodes.push({ ID, Name });
            }
           

            const character = {
                Name: name,
                Type: type,
                Species: species,
                Image: image,
                Status: status,
                Gender: gender,
                Location: { ID: location.value },
                Origin: { ID: origin.value },
                Episodes: { EpisodesList: episodes }
            };

            if (valid === true) {
                postData(character);
            } else {
                alert("Please enter all data.");
            }
        }
    </script>
}